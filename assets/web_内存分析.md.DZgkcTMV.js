import{_ as s,c as i,o as l,ag as e}from"./chunks/framework.BPw0-pHp.js";const c=JSON.parse('{"title":"Electron 项目优化","description":"","frontmatter":{},"headers":[],"relativePath":"web/内存分析.md","filePath":"web/内存分析.md"}'),n={name:"web/内存分析.md"};function t(h,a,p,r,k,o){return l(),i("div",null,a[0]||(a[0]=[e(`<h1 id="electron-项目优化" tabindex="-1">Electron 项目优化 <a class="header-anchor" href="#electron-项目优化" aria-label="Permalink to &quot;Electron 项目优化&quot;">​</a></h1><h3 id="内存、性能优化" tabindex="-1">内存、性能优化 <a class="header-anchor" href="#内存、性能优化" aria-label="Permalink to &quot;内存、性能优化&quot;">​</a></h3><ol><li>通过Chrome内存快照工具分析发现接收一条数据，就会有大量的闭包、大数组和对象新增</li><li>闭包大连来自Vue的数据劫持setter和getter函数导致内存瞬间上升很大释放很慢</li><li>通过冻结消息列表和缓存会话对象减少大量的闭包生成</li></ol><h3 id="分时函数" tabindex="-1">分时函数 <a class="header-anchor" href="#分时函数" aria-label="Permalink to &quot;分时函数&quot;">​</a></h3><ol><li>会话列表数据量大，加载慢采用时分函数分批加载</li></ol><h3 id="结果" tabindex="-1">结果 <a class="header-anchor" href="#结果" aria-label="Permalink to &quot;结果&quot;">​</a></h3><ol><li>1400左右会话情况下登录占用内存减少 150M左右</li><li>100毫秒一条接收消息频率内存上升比优化直接减少20M， 内存峰值在450M左右，均值在320~350之间</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">requestIdleCallback</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Q1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: requestIdleCallback 会在每一次帧结束时执行吗？</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">A1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 只会在帧末尾有空闲时间时会执行，不应该期望每一次帧结束都会执行requestIdleCallback。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂😂</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Q2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 什么操作不适合放到 requestIdleCallback 的callback中。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">A2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 更新DOM，以及Promise的回调（会使帧超时），什么意思？请看下面的代码。requestIdleCallback中代码，应该是一些可以预测执行时间的小段代码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">作者：dyhtps</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">链接：</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//juejin.cn/post/6844904081463443463</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">来源：稀土掘金</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span></code></pre></div><h3 id="发送文件优化" tabindex="-1">发送文件优化 <a class="header-anchor" href="#发送文件优化" aria-label="Permalink to &quot;发送文件优化&quot;">​</a></h3><ol><li>把复制阶段</li></ol>`,10)]))}const E=s(n,[["render",t]]);export{c as __pageData,E as default};
